<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="untitled5">
 <title>Creating Your Own DITA Open Toolkit Containers</title>
 <shortdesc>You can easily configure your own DITA Open Toolkit containers using the
    ditaot/dita-ot-base container as a starting point.</shortdesc>
 <conbody>
  <p>The ditaot/dita-ot container is suitable for direct use in running the Open Toolkit but,
      because it exposes the DITA-OT directory as a volume, is not usable as the base container for
      new Open Toolkit containers. This is because once you declare a directory as a volume in a
      Docker file, any subsequent changes to that directory made by the Docker file will not be
      persisted in the final image.</p>
    <p>The ditaot/dita-ot-base container is designed to be used as the base for new DITA OT
      containers by not defining the DITA-OT volume. The base Dockerfile is available on GitHub in
      the <xref keyref="website-dita-community-dita-ot-docker"/> project as
        <filepath>dita-ot-base/Dockerfile</filepath>.</p>
    <p>You set up your own working container using a Dockerfile like
      this:<codeblock>FROM ditaot/dita-ot-base
MAINTAINER Me Myself "me@example.com"
#
# My custom DITA Open Toolkit
#
#
# Add your additional stuff here
#
VOLUME /opt/dita-ot/DITA-OT
CMD /bin/bash
#
# End of Dockerfile
#</codeblock></p>
    <p>The <codeph>FROM</codeph> statement is required and must be the first statement in the file.
      The <codeph>MAINTAINER</codeph> statement is documentation.</p>
    <p>The <codeph>VOLUME</codeph> statement makes the <filepath>/opt/dita-ot/DITA-OT</filepath>
      directory in the container available to other containers that use this container's volumes. It
      should always be <filepath>/opt/dita-ot/DITA-OT</filepath> so you can use your own container
      in place of the base DITA OT container without affecting any containers that use the OT from a
      container.</p>
    <p>There are basically two ways to add your custom plugins to the container:<ul
        id="ul_pp4_1gq_x5">
        <li>Get a Zip file from the Web using <cmdname>wget</cmdname> or <cmdname>curl</cmdname> via
          the Dockerfile <cmdname>RUN</cmdname> statement. For example, if your plugins are in a
          GitHub repository you can get the plugin as a Zip file using an HTTP URL.</li>
        <li>Copy files from the host machine into the container using the Dockerfile
            <cmdname>ADD</cmdname> statement.</li>
      </ul></p>
    <p>To get a Zip file use <cmdname>wget</cmdname> like so:</p>
    <codeblock>FROM ditaot/dita-ot-base
MAINTAINER Me Myself "me@example.com"
#
# My custom DITA Open Toolkit
#
WORKDIR ${DITA_HOME}
ENV DITA_COMM_URL=https://github.com/dita-community/ BRANCH=develop
#
# Get plugin from DITA Community project:
RUN wget ${DITA_COMM_URL}org.dita-community.common.xslt/archive/${BRANCH}.zip &amp;&amp; \
  unzip ${BRANCH}.zip -d plugins &amp;&amp; 
  rm ${BRANCH}.zip
#
# Integrate new plugins
#
RUN ant -f integrator.xml
#
VOLUME /opt/dita-ot/DITA-OT
CMD /bin/bash
#
# End of Dockerfile
#</codeblock>
    <p>The <cmdname>WORKDIR</cmdname> statement sets the current working directory to the DITA-OT
      directory. You can refer to environment variables set in the base container's Dockerfile.</p>
    <p>The <cmdname>ENV</cmdname> statement defines two new environment variables that make it
      easier to construct the <cmdname>wget</cmdname> commands that follow. For the DITA Community
      project, the latest code is normally on the develop branch.</p>
    <p>The <cmdname>RUN wget</cmdname> statement runs a Linux command. In this case the command is
      actually three commands, <cmdname>wget</cmdname>, <cmdname>unzip</cmdname>, and
        <cmdname>rm</cmdname>,  connected by "&amp;&amp;" (boolean and) operators. This is normal
      Linux shell script syntax. It means "do the first command and, if it succeeds, perform the
      next command, and then the next.</p>
    <p>Stringing commands together like this is best Docker practice as it avoids creating
      unnecessary layers in the container and avoids some issues with caching.</p>
    <p>The <cmdname>RUN ant</cmdname> statement runs the normal Open Toolkit integrator script to
      integrate the new plugins.</p>
    <p>The <cmdname>VOLUME</cmdname> statement publishes the <filepath>DITA-OT</filepath> directory
      as a volume, making it available to other containers. This statement must follow the commands
      that add things to the <filepath>DITA-OT</filepath> directory.</p>
    <p>The <cmdname>CMD</cmdname> statement defines the default command to run when the container is
      started, in this case a bash shell. If you run the container without the
        <parmname>-it</parmname> parameters the shell will run and then immediately exit. If you
      specify the <parmname>-it</parmname> parameters to the <cmdname>docker run</cmdname> command
      then you will end up in a bash terminal window inside the container. If you specify a command
      as a paremeter to the <cmdname>docker run</cmdname> command then it is run in place of the
      command defined on the <cmdname>CMD</cmdname> statement.</p>
    <p>It should be clear that you can quickly copy and paste the <cmdname>RUN wget</cmdname> lines
      to add whatever HTTP-accessible plugins you want.</p>
    <p>Note also that using the 2.x version of the Open Toolkit you could use the <cmdname>dita
        --install</cmdname> command to directly install plugins from Zip files via HTTP URL.
      However, if you need your container to work with both the 1.x and 2.x Open Toolkit versions
      you need to use the <cmdname>wget</cmdname> plus <filepath>integrator.xml</filepath>
      approach.</p>
    <p>To use plugins that are on your local machine you can use the the Dockerfile
        <cmdname>ADD</cmdname> statement, which copies files from the host machine into the
      container. The main requirement is that the files to be added must be in or under the
      directory that contains the <filepath>Dockerfile</filepath> file:</p>
    <codeblock>FROM ditaot/dita-ot-base
MAINTAINER Me Myself "me@example.com"
#
# My custom DITA Open Toolkit
#
WORKDIR ${DITA_HOME}
ENV DITA_COMM_URL=https://github.com/dita-community/ BRANCH=develop
#
# Get plugin from DITA Community project:
ADD plugins/org.example.myhtml/ .
#
# Integrate new plugins
#
RUN ant -f integrator.xml
#
VOLUME /opt/dita-ot/DITA-OT
CMD /bin/bash
#
# End of Dockerfile
#</codeblock>
    <p>To build the container you use the <cmdname>docker build</cmdname> command from the directory
      that contains the <filepath>Dockerfile</filepath>
      file:<codeblock>$ cd /workspace/mycontainer/dita-ot
$ ls
Dockerfile
plugins/
$ <b>docker build .</b>
… {lots of messages} ...
Removing intermediate container 5185b8770fc4
Successfully built 3df126334196
$ _</codeblock></p>
    <p>If you don't specify an image name with the <cmdname>-t</cmdname> parameter then the build
      command will assign a numeric image ID . You can run the container by specifying the numeric
      ID:<codeblock>$ docker run -it 3df126334196
root@a90236ed0684:~/DITA-OT# _</codeblock></p>
    <p>You can get a list of all the images in your environment using the <cmdname>docker
        images</cmdname>
      command:<codeblock>$ docker images
docker images
REPOSITORY                          TAG                 IMAGE ID            CREATED             SIZE
&lt;none>                              &lt;none>              3df126334196        2 minutes ago       778.7 MB
… {potentially long list of images}
$ _</codeblock></p>
    <p>You can remove images using the <cmdname>docker rmi</cmdname> command:</p>
    <codeblock>$ docker rmi -f 3df126334196
Deleted: sha256:3df1263341965178e0b43215fb2087c42ae7c815f4f636810531a7660055bb53
Deleted: sha256:fb433121937830f727d2218af86bca050af86ea7e21b713cfb4b1abea060e1a1
$ _</codeblock>
    <p>The <parmname>-f</parmname> (force) parameter forces removal of the image. If you don't force
      the removal you have to first rm the container image, which will be stopped if you ran it
      before.</p>
    <p>You can use the <parmname>--rm</parmname> parameter of the <cmdname>docker run</cmdname>
      command to have the image automatically remove itself after it
      runs:<codeblock>docker run --rm -it 3df126334196
root@a90236ed0684:~/DITA-OT# _</codeblock></p>
    <p>To give the image a name, use the <parmname>-t</parmname> (tag) parameter of the
        <cmdname>docker build</cmdname>
      command:<codeblock>$ docker build -t me/dita-ot .
… {lots of messages, but fewer than before 
  if there was no change to the Dockerfile}...
$ docker images
docker images
REPOSITORY                          TAG                 IMAGE ID            CREATED             SIZE
me/dita-ot                          latest              1e5c40fd12af        24 seconds ago      778.7 MB
...
$ _</codeblock></p>
    <p>Now you can run the image using the tag rather than the image
      ID:<codeblock>$ docker run --rm -it me/dita-ot
root@8b64266207fd:~/DITA-OT# </codeblock></p>
 </conbody>
</concept>
